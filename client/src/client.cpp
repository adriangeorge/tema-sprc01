/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "interface.h"
#include <fstream>
#include <iostream>
#include <sstream>
#include <string>

std::string curr_token;
std::string input_file;
void sprc_hw_1(char *host)
{
	CLIENT *clnt;
	clnt = clnt_create(host, SPRC_HW, SPRC_HW_VER, "udp");
	if (clnt == NULL) {
		clnt_pcreateerror(host);
		exit(1);
	}

	std::ifstream req_file(input_file);

	std::string in_line;
	while (req_file >> in_line) {
		std::stringstream s(in_line);
		std::string user_id, operation_type, operation_arg;
		getline(s, user_id, ',');
		getline(s, operation_type, ',');
		getline(s, operation_arg, ',');

		std::cout << user_id << " " << operation_type << " "
			  << operation_arg << std::endl;

        if(operation_type == "REQUEST") {

        } else {
            
        }
	}
	req_file.close();
	return;
	server_res_token *result_1;
	client_req_auth req_auth_1_arg;

	server_res_token *result_2;
	client_req_approve approve_req_token_1_arg;

	server_res_token *result_3;
	client_req_access req_bearer_token_1_arg;

	server_res_token *result_4;
	client_req_access req_bearer_token_refresh_1_arg;

	server_res_token *result_5;
	client_req_op validate_delegated_action_1_arg;

	result_1 = req_auth_1(&req_auth_1_arg, clnt);
	if (result_1 == (server_res_token *)NULL) {
		clnt_perror(clnt, "call failed");
	}
	result_2 = approve_req_token_1(&approve_req_token_1_arg, clnt);
	if (result_2 == (server_res_token *)NULL) {
		clnt_perror(clnt, "call failed");
	}
	result_3 = req_bearer_token_1(&req_bearer_token_1_arg, clnt);
	if (result_3 == (server_res_token *)NULL) {
		clnt_perror(clnt, "call failed");
	}
	result_4 =
	    req_bearer_token_refresh_1(&req_bearer_token_refresh_1_arg, clnt);
	if (result_4 == (server_res_token *)NULL) {
		clnt_perror(clnt, "call failed");
	}
	result_5 =
	    validate_delegated_action_1(&validate_delegated_action_1_arg, clnt);
	if (result_5 == (server_res_token *)NULL) {
		clnt_perror(clnt, "call failed");
	}

	clnt_destroy(clnt);
}

int main(int argc, char *argv[])
{
	char *host;

	if (argc < 2) {
		printf("usage: %s server_host\n", argv[0]);
		exit(1);
	}
	host = argv[1];
	input_file = argv[2];
	sprc_hw_1(host);
	exit(0);
}
