/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "interface.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

server_res_token *
req_auth_1(client_req_auth *argp, CLIENT *clnt)
{
	static server_res_token clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, req_auth,
		(xdrproc_t) xdr_client_req_auth, (caddr_t) argp,
		(xdrproc_t) xdr_server_res_token, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

server_res_token *
approve_req_token_1(client_req_signature *argp, CLIENT *clnt)
{
	static server_res_token clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, approve_req_token,
		(xdrproc_t) xdr_client_req_signature, (caddr_t) argp,
		(xdrproc_t) xdr_server_res_token, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

server_res_token *
req_bearer_token_1(client_req_bearer_token *argp, CLIENT *clnt)
{
	static server_res_token clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, req_bearer_token,
		(xdrproc_t) xdr_client_req_bearer_token, (caddr_t) argp,
		(xdrproc_t) xdr_server_res_token, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

server_res_token *
req_bearer_token_refresh_1(client_req_bearer_token *argp, CLIENT *clnt)
{
	static server_res_token clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, req_bearer_token_refresh,
		(xdrproc_t) xdr_client_req_bearer_token, (caddr_t) argp,
		(xdrproc_t) xdr_server_res_token, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

server_res_op *
validate_delegated_action_1(client_req_op *argp, CLIENT *clnt)
{
	static server_res_op clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, validate_delegated_action,
		(xdrproc_t) xdr_client_req_op, (caddr_t) argp,
		(xdrproc_t) xdr_server_res_op, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
